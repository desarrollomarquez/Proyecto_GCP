https://www.twblogs.net/a/5d0f91c9bd9eee1ede04894f
----------------------------------------------------------------------------------
<html>
<head><title> Welcome Diego Blog</title></head>
<body>
<h1> Welcome Diego Blog </h1>
<?php

$dbserver = "104.198.138.166";
$dbuser = "blogdbuser";
$dbpassword = "simplesimple";

$conn = new mysqli($dbserver, $dbuser, $dbpassword);

if(mysqli_connect_error()){
echo ("Database connection failed: " .mysqli_connect_error());
}
else{
echo ("Database connection succeeded" );
}
?>
</body>
</html>

--------------------------------------------------------------------------------------------

gcloud compute zones list | grep us-centrall


-- Startup script (Optional) ---

apt-get update
apt-get install apache2 php php-mysql -y
service apache2 restart


-- contenedores ----

export MY_ZONE=us-central1-f

----------------------------------------------------------------------------------------------

gsutil mb gs://<diego2bk>

gsutil cp image001.png gs://diego2b


us-central1


INFRACLASS_REGION=us-central1
 
INFRACLASS_PROJECT_ID=$DEVSHELL_PROJECT_ID


sudo /opt/bitnami/ctlscript.sh stop


sudo /opt/bitnami/ctlscript.sh restart



ping -c 3 10.132.0.2
ping -c 3 10.128.0.2

gcloud compute --project=qwiklabs-gcp-00-77f8138e590d networks create privatenet  --subnet-mode=custom

gcloud compute --project=qwiklabs-gcp-00-77f8138e590d networks subnets create privatesubnet-us --network=privatenet --region=us-central1 --range=172.16.0.0/24

gcloud compute --project=qwiklabs-gcp-00-77f8138e590d networks subnets create privatesubnet-eu --network=privatenet --region=europe-west1 --range=172.20.0.0/20


gcloud compute --project=qwiklabs-gcp-00-77f8138e590d firewall-rules create privatenet-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=privatenet --action=ALLOW --rules=tcp:22,tcp:3389,icmp --source-ranges=0.0.0.0/0


gcloud container clusters webfrontend --zone $MY_ZONE --num-nodes 2

kubectl run nginx --image=nginx:1.10.0

kubectl get pods

kubectl expose deployment nginx --port 80 --type LoadBalancer

kubectl get services

kubectl scale deployment nginx --replicas 3




34.68.61.127
<img src='https://storage.googleapis.com/qwiklabs-gcp-00-40f7d5ea2d9d/my-excellent-blog.png'>

<html>
<head><title>Welcome to my excellent blog</title></head>
<body>
<h1>Welcome to my excellent blog</h1>
<?php
 $dbserver = "34.68.61.127";
$dbuser = "blogdbuser";
$dbpassword = "simplesimple";
// In a production blog, we would not store the MySQL
// password in the document root. Instead, we would store it in a
// configuration file elsewhere on the web server VM instance.

$conn = new mysqli($dbserver, $dbuser, $dbpassword);

if (mysqli_connect_error()) {
        echo ("Database connection failed: " . mysqli_connect_error());
} else {
        echo ("Database connection succeeded.");
}
?>
</body></html>




git clone https://github.com/GoogleCloudPlatform/appengine-guestbook-python

cd appengine-guestbook-python/

cat app.yaml

dev_appserver.py ./app.yaml

gcloud app deploy ./index.yaml ./app.yaml

gsutil mb -l US gs://$DEVSHELL_PROJECT_ID


gsutil ls gs://$DEVSHELL_PROJECT_ID

resources:
- name: diego-vm
  type: compute.v1.instance
  properties:
     zone: us-central1-f
     machineType: zones/us-central1-f/machineTypes/n1-standard-1
     metadata:
      items:
      - key: startup-script
        value: "apt-get update"
     disks:
     - deviceName: boot
       type: PERSISTENT
       boot: true
       autoDelete: true
       initializeParams:
         sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-9-stretch-v201709$
     networkInterfaces:
     - network: https://www.googleapis.com/compute/v1/projects/PROJECT_ID/global/networks/default
	   accessConfigs:
	   - name: External NAT
	     type: ONE_TO_ONE_NAT

rm  mydeploy.yaml


export MY_ZONE=us-central1-f
	 
sed -i -e 's/PROJECT_ID/'$DEVSHELL_PROJECT_ID/ mydeploy.yaml

sed -i -e 's/ZONE/'$MY_ZONE/  mydeploy.yaml

gcloud deployment-manager deployments create my-first-depl \

--config mydeploy.yaml


gcloud deployment-manager deployments list

apt-get install nginx-light -y


gcloud deployment-manager deployments update my-first-depl \


dd if=/dev/urandom | gzip =9 >> /dev/null &







gs://cloud-training/gcpfci/access_log.csv

bq query "SELECT int64_field_6 as hour, count(*) as hitcount FROM logdata.accesslog GROUP BY hour ORDER BY hour DESC"


sudo mount -o discard,defaults /dev/disk/by-id/google-minecraftdisk /home/minecraft

export YOUR_BUCKET_NAME=qwiklabs-gcp-00-70dea90330f6


export SQL_CONNECTION=qwiklabs-gcp-00-596404988b65:us-central1:wordpress-db


SELECT
  product,
  resource_type,
  start_time,
  end_time,
  cost,
  project_id,
  project_name,
  project_labels_key,
  currency,
  currency_conversion_rate,
  usage_amount,
  usage_unit
FROM
  `cloud-training-prod-bucket.arch_infra.billing_data`
  
  
export BUCKET_NAME_1=qwiklabs-gcp-00-a6b9be7d108a


shmRhnGCCziio4iHNx0F3TiGTzZSNH5CbmbKMeCUrEc

Before:
# encryption_key=

After:
shmRhnGCCziio4iHNx0F3TiGTzZSNH5CbmbKMeCUrEc=



export BUCKET_NAME_2=myproj-qwiklabs-gcp-00-a6b9be7d108a


######################################### Config.yaml##################################################################

imports:
- path: instance-template.jinja

resources:
# Create the auto-mode network
- name: mynetwork
  type: compute.v1.network
  properties:
    autoCreateSubnetworks: true
# Create the firewall rule
- name: mynetwork-allow-http-ssh-rdp-icmp
  type: compute.v1.firewall
  properties:
    network: $(ref.mynetwork.selfLink)
    sourceRanges: ["0.0.0.0/0"]
    allowed:
    - IPProtocol: TCP
      ports: [22, 80, 3389]
    - IPProtocol: ICMP

# Create the mynet-us-vm instance
- name: mynet-us-vm
  type: instance-template.jinja
  properties:
    zone: us-central1-a
    machineType: n1-standard-1
    network: $(ref.mynetwork.selfLink)
    subnetwork: regions/us-central1/subnetworks/mynetwork

# Create the mynet-eu-vm instance
- name: mynet-eu-vm
  type: instance-template.jinja
  properties:
    zone: europe-west1-d
    machineType: n1-standard-1
    network: $(ref.mynetwork.selfLink)  
    subnetwork: regions/europe-west1/subnetworks/mynetwork
	
############################################# instance-template.jinja ##############################################################
resources:
- name: {{ env["name"] }}
  type: compute.v1.instance  
  properties:
     machineType: zones/{{ properties["zone"] }}/machineTypes/{{ properties["machineType"] }}
     zone: {{ properties["zone"] }}
     networkInterfaces:
      - network: {{ properties["network"] }}
        subnetwork: {{ properties["subnetwork"] }}
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
     disks:
      - deviceName: {{ env["name"] }}
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9
		  
		  gcloud deployment-manager deployments create dminfra --config =config.yaml --preview
		  
		  gcloud deployment-manager deployments update dminfra --config config.yaml.yaml --preview

///////////////////////////// TERRAFORM ////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////main.tf /////////////////////////////////////////////
variable "instance_name" {}
variable "instance_zone" {}
variable "instance_type" {
  default = "n1-standard-1"
  }
variable "instance_subnetwork" {}

resource "google_compute_instance" "vm_instance" {
  name         = "${var.instance_name}"
  zone         = "${var.instance_zone}"
  machine_type = "${var.instance_type}"
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
      }
  }
  network_interface {
    subnetwork = "${var.instance_subnetwork}"
    access_config {
      # Allocate a one-to-one NAT IP to the instance
    }
  }
}

////////////////////////////mynetwork///////////////////////////////////////

# Create the mynetwork network
resource "google_compute_network" "mynetwork" {
  name                    = "mynetwork"
  auto_create_subnetworks = "true"
}

# Add a firewall rule to allow HTTP, SSH, RDP, and ICMP traffic on mynetwork
resource "google_compute_firewall" "mynetwork-allow-http-ssh-rdp-icmp" {
  name    = "mynetwork-allow-http-ssh-rdp-icmp"
  network = google_compute_network.mynetwork.self_link
  allow {
    protocol = "tcp"
    ports    = ["22", "80", "3389"]
  }
  allow {
    protocol = "icmp"
  }
}

# Create the mynet-us-vm instance
module "mynet-us-vm" {
  source              = "./instance"
  instance_name       = "mynet-us-vm"
  instance_zone       = "us-central1-a"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

# Create the mynet-eu-vm" instance
module "mynet-eu-vm" {
  source              = "./instance"
  instance_name       = "mynet-eu-vm"
  instance_zone       = "europe-west1-d"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

/////////////////////////// provider //////////////////////////////////////////////

provider "google" {}

gcloud compute machine-types describe f1-micro --zone us-central1-a

######################################################################################################

resources:
- name: appserver
  type: compute.v1.instance 
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-55a4e6ed6432/zones/us-central1-a/machineTypes/f1-micro
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-55a4e6ed6432/global/networks/default
      accessConfigs:
      - name: External_NAT
        type: ONE_TO_ONE_NAT
    disks:
    - type: PERSISTENT
      deviceName: boot
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-10-buster-v20191121
		




######################################################################################################################################

gcloud deployment-manager deployments create development --config appserver.yaml
gcloud deployment-manager deployments create load-testing --config appserver.yaml
gcloud deployment-manager deployments create security --config appserver.yaml
gcloud deployment-manager deployments create production --config appserver.yaml

#####################################################################################################################################
config.yaml

imports:
  - path: instance.jinja
  - path: install-echo.sh
    name: startup-script
resources:
  - name: instance
    type: instance.jinja
    properties:
      zone: us-central1-a
      tags:
        - http
      metadata:
        - key: echo
          value: https://storage.googleapis.com/package_python/echo-0.0.1.tar.gz
		  
setup.py

from setuptools import setup

setup(
    name="echo",
    version="0.0.1",
    author="Google Cloud Training",
    author_email="cloud-training@google.com",

    # Packages
    packages=["echo"],

    # Include additional files into the package
    include_package_data=True,

    # Details
    #url="http://pypi.python.org/pypi/MyApplication_v010/",

    license="LICENSE.txt",
    # description="Useful towel-related stuff.",

    # long_description=open("README.txt").read(),

    # Dependent packages (distributions)
    install_requires=[
        "flask==0.12.2",
        "gunicorn"
    ]
)

install-echo.sh

#!/bin/bash -e

ATTR=http://metadata.google.internal/computeMetadata/v1/instance/attributes

apt-get update
apt-get -y install python-pip
python -m pip install --upgrade pip

if pkg=$(curl -sf "${ATTR}/echo" -H "Metadata-Flavor: Google"); then
    python -m pip install $pkg
    gunicorn -b 0.0.0.0:80 -w 4 echo:app
fi
	

